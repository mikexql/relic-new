"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarRail = exports.defaultClientOption = void 0;
const config_file_js_1 = require("config_file.js");
const CachedAssetsManager_1 = require("./CachedAssetsManager");
const CharacterData_1 = require("../models/character/CharacterData");
const LightConeData_1 = require("../models/light_cone/LightConeData");
const RelicData_1 = require("../models/relic/RelicData");
const axios_utils_1 = require("../utils/axios_utils");
const StarRailUser_1 = require("../models/StarRailUser");
const enka_system_1 = require("enka-system");
const StarRailCharacterBuild_1 = require("../models/enka/StarRailCharacterBuild");
const starRailResMap = {
    "SpriteOutput/AvatarIcon": "icon/character",
    "SpriteOutput/ItemIcon": "icon/item",
    "SpriteOutput/UI/Avatar/Icon": "icon/property",
    "SpriteOutput/UI/Nature/IconAttributeMiddle": "icon/element",
};
const yattaMap = {
    "SpriteOutput/AvatarDrawCard": "avatar/large/{fileName}.sm",
    "SpriteOutput/AvatarRoundIcon/Avatar": "avatar/round/{fileName}",
    // some shop icons are 2px height smaller than the original
    "SpriteOutput/AvatarShopIcon": "avatar/medium/{fileName}",
    "SpriteOutput/ProfessionIconSmall": "profession/{fileName}",
    "SpriteOutput/UI/Nature/IconAttribute": "attribute/{fileName}",
    "SpriteOutput/SkillIcons": "skill/{fileName}",
    "SpriteOutput/ItemIcon": "item/{fileName}",
    "SpriteOutput/UI/Avatar/Icon": "status/{fileName}",
    "SpriteOutput/ItemIcon/RelicIcons": "relic/{fileName}",
    "SpriteOutput/UI/Avatar/Relic": "relic/white/{fileName}",
};
const defaultImageBaseUrls = [
    {
        filePath: "UPPER_CAMEL_CASE",
        priority: 5,
        format: "PNG",
        regexList: [
            /^SpriteOutput\/SkillIcons\/\d+\/SkillIcon_\d+_(?!Ultra_on)/,
            /^SpriteOutput\/ItemIcon\/RelicIcons\/(.+)$/,
            /^SpriteOutput\/(AvatarDrawCard|LightConeFigures)\/(.+)$/,
            /^SpriteOutput\/AvatarRoundIcon\/(Avatar|Series)\/(.+)$/,
            /^SpriteOutput\/UI\/Avatar\/Icon\/(.+)$/,
        ],
        url: "https://enka.network/ui/hsr",
        customParser: (path) => path.replace(/(?<=^SpriteOutput\/SkillIcons\/)\d+\//, ""),
    },
    {
        filePath: "UPPER_CAMEL_CASE",
        priority: 4,
        format: "PNG",
        regexList: Object.keys(yattaMap).map((key) => new RegExp(`^${key}/([^/]+)$`)),
        url: "https://api.yatta.top/hsr/assets/UI",
        customParser: (path) => {
            const split = path.split("/");
            // without extension
            const fileName = split.pop().split(".").slice(0, -1).join(".");
            // dir without numbered directory
            let dir = split.filter(d => !/\d+/.test(d)).join("/");
            if (dir === "SpriteOutput/ItemIcon" && fileName.length === 5 && fileName.startsWith("71")) {
                dir = "SpriteOutput/ItemIcon/RelicIcons";
            }
            const value = yattaMap[dir];
            return value.replace(/{fileName}/g, fileName) + ".png";
        },
    },
    {
        filePath: "UPPER_CAMEL_CASE",
        priority: 3,
        format: "PNG",
        regexList: Object.keys(starRailResMap).map((key) => new RegExp(`^${key}/([^/]+)$`)),
        url: "https://raw.githubusercontent.com/Mar-7th/StarRailRes/master",
        customParser: (path) => {
            const split = path.split("/");
            const fileName = split.pop();
            const dir = split.join("/");
            const value = starRailResMap[dir];
            switch (value) {
                case "icon/character":
                case "icon/item":
                case "icon/property":
                    return `${value}/${fileName}`;
                case "icon/element":
                    return `${value}/${fileName.replace(/^IconAttribute/, "").replace("Thunder", "Lightning")}`;
            }
        },
    },
    {
        filePath: "LOWER_CASE",
        priority: 2,
        format: "PNG",
        regexList: [
            /^SpriteOutput\/(.+)/,
        ],
        url: "https://raw.githubusercontent.com/FortOfFans/HSR/main",
    },
    {
        filePath: "LOWER_CASE",
        priority: 1,
        format: "WEBP",
        regexList: [
            /^SpriteOutput\/(AvatarShopIcon|AvatarRoundIcon|AvatarDrawCard|RelicFigures|ItemFigures|LightConeMaxFigures|LightConeMediumIcon)\/(.+)/,
            /^UI\/UI3D\/Rank\/_dependencies\/Textures\/\d+\/\d+_Rank_[1-6]/,
        ],
        url: "https://api.hakush.in/hsr/UI",
        customParser: (path) => path.replace(/^(spriteoutput|ui\/ui3d)\//, "").replace("avatarroundicon/avatar/", "avatarroundicon/").replace(/\.png$/, ".webp"),
    },
];
exports.defaultClientOption = {
    userAgent: "Mozilla/5.0",
    cacheDirectory: null,
    showFetchCacheLog: true,
    requestTimeout: 3000,
    defaultLanguage: "en",
    imageBaseUrls: [...defaultImageBaseUrls],
    githubToken: null,
    apiBaseUrl: "https://enka.network/api/hsr/uid",
    enkaSystem: null,
    userCache: {
        isEnabled: true,
        mihomoTtl: 600,
        getter: null,
        setter: null,
        deleter: null,
    },
};
const userCacheMap = new Map();
class StarRail {
    getUser(data) {
        const fixedData = (0, config_file_js_1.renameKeys)(data, { "player_info": "detailInfo" });
        return new StarRailUser_1.StarRailUser(fixedData, this);
    }
    getCharacterBuild(data, username, hash) {
        return new StarRailCharacterBuild_1.StarRailCharacterBuild(data, this, username, hash);
    }
    constructor(options) {
        this._tasks = [];
        this.hoyoType = 1;
        const mergedOptions = (0, config_file_js_1.bindOptions)(exports.defaultClientOption, options);
        if (!mergedOptions.enkaSystem) {
            if (enka_system_1.EnkaSystem.instance.getLibrary(this.hoyoType)) {
                mergedOptions.enkaSystem = new enka_system_1.EnkaSystem();
            }
            else {
                mergedOptions.enkaSystem = enka_system_1.EnkaSystem.instance;
            }
        }
        this.options = mergedOptions;
        this.cachedAssetsManager = new CachedAssetsManager_1.CachedAssetsManager(this);
        this.options.enkaSystem.registerLibrary(this);
    }
    /**
     * @throws {EnkaNetworkError}
     */
    async fetchUser(uid, options = {}) {
        var _a, _b, _c;
        if (isNaN(Number(uid)))
            throw new Error("Parameter `uid` must be a number or a string number.");
        const fetchOptions = (0, config_file_js_1.bindOptions)({
            mihomoForceUpdate: false,
        }, options);
        const cacheGetter = (_a = this.options.userCache.getter) !== null && _a !== void 0 ? _a : (async (key) => userCacheMap.get(key));
        const cacheSetter = (_b = this.options.userCache.setter) !== null && _b !== void 0 ? _b : (async (key, data) => { userCacheMap.set(key, data); });
        const cacheDeleter = (_c = this.options.userCache.deleter) !== null && _c !== void 0 ? _c : (async (key) => { userCacheMap.delete(key); });
        const cacheKey = `${uid}`;
        const cachedUserData = await cacheGetter(cacheKey);
        const mihomoForceUpdate = fetchOptions.mihomoForceUpdate && this.options.apiBaseUrl === "https://api.mihomo.me/sr_info";
        const useCache = !!(cachedUserData && this.options.userCache.isEnabled) && !mihomoForceUpdate;
        let data;
        if (!useCache) {
            const baseUrl = this.options.apiBaseUrl;
            const url = `${baseUrl}/${uid}${mihomoForceUpdate ? "?is_force_update=1" : ""}`;
            const response = await (0, axios_utils_1.fetchJSON)(url, this, true);
            if (response.status !== 200) {
                switch (response.status) {
                    case 400:
                        throw new enka_system_1.InvalidUidFormatError(Number(uid), response.status, response.statusText);
                    case 424:
                        throw new enka_system_1.EnkaNetworkError("Request to enka.network failed because it is under maintenance.", response.status, response.statusText);
                    case 429:
                        throw new enka_system_1.EnkaNetworkError("Rate Limit reached. You reached enka.network's rate limit. Please try again in a few minutes.", response.status, response.statusText);
                    case 404:
                        throw new enka_system_1.UserNotFoundError(`User with uid ${uid} was not found. Please check whether the uid is correct. If you find the uid is correct, it may be a internal server error.`, response.status, response.statusText);
                    default:
                        throw new enka_system_1.EnkaNetworkError(`Request failed with unknown status code ${response.status} - ${response.statusText}\nError Detail: ${response.data["detail"]}\nRequest url: ${url}`, response.status, response.statusText);
                }
            }
            else if (response.data["retcode"]) {
                // only for mihomo api
                switch (response.data["retcode"]) {
                    case 3612:
                        throw new enka_system_1.UserNotFoundError(`User with uid ${uid} was not found. Please check whether the uid is correct. If you find the uid is correct, it may be a internal server error.`, response.status, response.statusText);
                    default:
                        throw new Error(`Unknown server error occurred. ErrorCode(retcode): ${response.data["retcode"]}`);
                }
            }
            data = Object.assign({}, response.data);
            if (this.options.userCache.isEnabled) {
                if (data.ttl === undefined)
                    data.ttl = this.options.userCache.mihomoTtl;
                const lifetime = data.ttl * 1000;
                const now = Date.now();
                data._lib = { cache_id: (0, config_file_js_1.generateUuid)(), created_at: now, expires_at: now + lifetime, original_ttl: data.ttl };
                const task = setTimeout(async () => {
                    const dataToDelete = await cacheGetter(cacheKey);
                    if (!dataToDelete)
                        return;
                    if (dataToDelete._lib.cache_id === data._lib.cache_id) {
                        await cacheDeleter(cacheKey);
                    }
                    this._tasks.splice(this._tasks.indexOf(task), 1);
                }, lifetime);
                this._tasks.push(task);
                await cacheSetter(cacheKey, data);
            }
        }
        else {
            data = Object.assign({}, cachedUserData);
            data.ttl = Math.ceil((data._lib.expires_at - Date.now()) / 1000);
        }
        const userData = (0, config_file_js_1.bindOptions)(data, { _lib: { is_cache: useCache } });
        return new StarRailUser_1.StarRailUser(userData, this);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @returns the starrail accounts added to the Enka.Network account
     */
    async fetchEnkaStarRailAccounts(username) {
        return await this.options.enkaSystem.fetchEnkaGameAccounts(username, [1]);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash EnkaGameAccount hash
     * @returns the starrail account with provided hash
     */
    async fetchEnkaStarRailAccount(username, hash) {
        return await this.options.enkaSystem.fetchEnkaGameAccount(username, hash);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash EnkaGameAccount hash
     * @returns the starrail character builds including saved builds in Enka.Network account
     */
    async fetchEnkaStarRailBuilds(username, hash) {
        return await this.options.enkaSystem.fetchEnkaCharacterBuilds(username, hash);
    }
    /**
     * @returns all character data
     */
    getAllCharacters(playableOnly = true) {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager._getExcelData("AvatarConfig")).filterObject((_, c) => (playableOnly && c.getAsNumber("AdventurePlayerID") === c.getAsNumber("AvatarID")) || !playableOnly).map(([, c]) => new CharacterData_1.CharacterData(c.getAsNumber("AvatarID"), this));
    }
    /**
     * @returns all light cone data
     */
    getAllLightCones(excludeTestLightCones = true) {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager._getExcelData("EquipmentConfig")).filterObject((_, lc) => (excludeTestLightCones && lc.has("AvatarBaseType")) || !excludeTestLightCones).map(([, lc]) => new LightConeData_1.LightConeData(lc.getAsNumber("EquipmentID"), this));
    }
    /**
     * @returns all relic data
     */
    getAllRelics() {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager._getExcelData("RelicConfig")).mapObject((_, relic) => new RelicData_1.RelicData(relic.getAsNumber("ID"), this));
    }
    /**
     * Clear all running tasks in the client.
     */
    close() {
        this._tasks.forEach(task => clearTimeout(task));
    }
}
exports.StarRail = StarRail;
