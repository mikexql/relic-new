"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarRailUser = exports.platformMap = void 0;
const config_file_js_1 = require("config_file.js");
const enka_system_1 = require("enka-system");
const Character_1 = require("./character/Character");
const UserIcon_1 = require("./UserIcon");
exports.platformMap = {
    1: "IOS",
    2: "ANDROID",
    3: "PC",
    11: "PS5",
};
class StarRailUser extends enka_system_1.User {
    constructor(data, client) {
        var _a;
        const json = new config_file_js_1.JsonReader(data);
        super(json);
        this.client = client;
        const detailInfo = json.get("detailInfo");
        this.uid = (_a = detailInfo.getAsNumberWithDefault(null, "uid")) !== null && _a !== void 0 ? _a : Number(json.getValue("uid"));
        this.nickname = detailInfo.getAsString("nickname");
        this.signature = detailInfo.getAsStringWithDefault(null, "signature");
        this.icon = new UserIcon_1.UserIcon(detailInfo.getAsNumber("headIcon"), this.client);
        this.level = detailInfo.getAsNumber("level");
        this.equilibriumLevel = detailInfo.getAsNumberWithDefault(0, "worldLevel");
        const platform = detailInfo.getValue("platform");
        this.platform = typeof platform === "number" ? exports.platformMap[platform] : typeof platform === "string" ? platform : null;
        this.friends = detailInfo.getAsNumberWithDefault(0, "friendCount");
        const recordInfo = detailInfo.get("recordInfo");
        this.achievementCount = recordInfo.getAsNumberWithDefault(0, "achievementCount");
        this.characterCount = recordInfo.getAsNumber("avatarCount");
        this.lightConeCount = recordInfo.getAsNumberWithDefault(0, "equipmentCount");
        this.bookCount = recordInfo.getAsNumberWithDefault(0, "bookCount");
        this.relicCount = recordInfo.getAsNumberWithDefault(0, "relicCount");
        this.musicCount = recordInfo.getAsNumberWithDefault(0, "musicCount");
        const challengeInfo = recordInfo.get("challengeInfo");
        this.challengeInfo = {
            level: challengeInfo.getAsNumberWithDefault(0, "abyssLevel"),
            stars: challengeInfo.getAsNumberWithDefault(0, "abyssStarCount"),
            forgottenHall: {
                memory: {
                    maxLevel: challengeInfo.getAsNumberWithDefault(0, "scheduleMaxLevel"),
                },
            },
        };
        this.simulatedUniverse = recordInfo.getAsNumberWithDefault(0, "maxRogueChallengeScore");
        this.isDisplayCharacter = detailInfo.getAsBooleanWithDefault(detailInfo.has("assistAvatarList") && detailInfo.getAsJsonArray("assistAvatarList").length > 0, "isDisplayAvatar");
        const avatarDetailList = detailInfo.getAsJsonArrayWithDefault([], "avatarDetailList");
        this.starfaringCompanions = avatarDetailList.filter(c => !c["_assist"]).map(c => new Character_1.Character(c, this.client));
        this.supportCharacters = (() => {
            // mihomo
            if (detailInfo.has("assistAvatarList"))
                return detailInfo.getAsJsonArray("assistAvatarList").map(c => new Character_1.Character(c, this.client));
            // enka
            return avatarDetailList.filter(c => c["_assist"]).map(c => new Character_1.Character(c, this.client));
        })();
        this.enkaUserHash = json.getAsStringWithDefault(null, "owner", "hash");
        this.enkaProfile = json.has("owner") ? new enka_system_1.EnkaProfile(client.options.enkaSystem, json.getAsJsonObject("owner")) : null;
    }
    /**
     * You should use this method to get characters if you use Enka.Network API.
     */
    getCharacters() {
        const characters = [...this.supportCharacters, ...this.starfaringCompanions];
        return Array.from(new Set(characters));
    }
}
exports.StarRailUser = StarRailUser;
