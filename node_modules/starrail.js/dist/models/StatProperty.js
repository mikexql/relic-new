"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.otherStatPropertyTypes = exports.statPropertyTypes = exports.StatPropertyValue = exports.StatProperty = void 0;
exports.isStatPropertyType = isStatPropertyType;
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = require("../errors/AssetsNotFoundError");
const ImageAssets_1 = require("./assets/ImageAssets");
const TextAssets_1 = require("./assets/TextAssets");
const DynamicTextAssets_1 = require("./assets/DynamicTextAssets");
class StatProperty {
    constructor(type, client) {
        this.type = type;
        this.client = client;
        const _data = client.cachedAssetsManager.getExcelData("AvatarPropertyConfig", this.type);
        if (!_data)
            throw new AssetsNotFoundError_1.AssetsNotFoundError("StatProperty", this.type);
        this._data = _data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.name = new TextAssets_1.TextAssets(json.getAsNumber("PropertyName", "Hash"), this.client);
        this.nameSkillTree = new TextAssets_1.TextAssets(json.getAsNumber("PropertyNameSkillTree", "Hash"), this.client);
        this.nameRelic = new TextAssets_1.TextAssets(json.getAsNumber("PropertyNameRelic", "Hash"), this.client);
        this.nameFilter = new TextAssets_1.TextAssets(json.getAsNumber("PropertyNameFilter", "Hash"), this.client);
        this.isDisplay = json.getAsBooleanWithDefault(false, "IsDisplay");
        this.isBattleDisplay = json.getAsBooleanWithDefault(false, "isBattleDisplay");
        this.order = json.getAsNumber("Order");
        this.icon = new ImageAssets_1.ImageAssets(json.getAsString("IconPath"), this.client);
        this.isPercent = exports.statPropertyTypes[this.type].isPercent;
    }
}
exports.StatProperty = StatProperty;
StatProperty.ALL_DAMAGE_TYPES = ["PhysicalAddedRatio", "FireAddedRatio", "IceAddedRatio", "ThunderAddedRatio", "WindAddedRatio", "QuantumAddedRatio", "ImaginaryAddedRatio"];
class StatPropertyValue {
    constructor(type, value, client) {
        this.client = client;
        this.type = type;
        this.statProperty = isStatPropertyType(type) ? new StatProperty(type, this.client) : null;
        this.isPercent = isStatPropertyType(type) ? exports.statPropertyTypes[type].isPercent : exports.otherStatPropertyTypes[type].isPercent;
        this.value = value;
        this.nameSkillTree = this.statProperty ? new DynamicTextAssets_1.DynamicTextAssets(this.statProperty.nameSkillTree.id, { paramList: [value] }, this.client) : null;
    }
    get valueText() {
        if (this.isPercent) {
            let valueString = (this.value * 100).toString();
            if (!valueString.includes("."))
                valueString += ".0";
            valueString = valueString.slice(0, valueString.indexOf(".") + 2);
            return valueString + "%";
        }
        return Math.floor(this.value).toString();
    }
}
exports.StatPropertyValue = StatPropertyValue;
// Object.entries(data).map(l => `|${l[0]}|${l[1]["isPercent"]}|${l[1]["defaultValue"]}|${l[1]["comment"] ?? ""}|`).join("\n");
exports.statPropertyTypes = {
    "MaxHP": { "isPercent": false, "defaultValue": 0 },
    "Attack": { "isPercent": false, "defaultValue": 0 },
    "Defence": { "isPercent": false, "defaultValue": 0 },
    "Speed": { "isPercent": false, "defaultValue": 0 },
    "CriticalChance": { "isPercent": true, "defaultValue": 0, "comment": "unknown, but used, likely percent" },
    "CriticalDamage": { "isPercent": true, "defaultValue": 0, "comment": "unknown, but used, likely percent" },
    "BreakDamageAddedRatio": { "isPercent": true, "defaultValue": 0, "comment": "unknown, not used, likely percent" },
    "BreakDamageAddedRatioBase": { "isPercent": true, "defaultValue": 0 },
    "HealRatio": { "isPercent": true, "defaultValue": 0, "comment": "unknown, not used, likely percent" },
    "MaxSP": { "isPercent": false, "defaultValue": 0 },
    "SPRatio": { "isPercent": true, "defaultValue": 0, "comment": "unknown, not used, likely percent" },
    "StatusProbability": { "isPercent": true, "defaultValue": 0, "comment": "unknown, only used in inventory sort, likely percent" },
    "StatusResistance": { "isPercent": true, "defaultValue": 0, "comment": "unknown, only used in inventory sort, likely percent" },
    "CriticalChanceBase": { "isPercent": true, "defaultValue": 0 },
    "CriticalDamageBase": { "isPercent": true, "defaultValue": 0 },
    "HealRatioBase": { "isPercent": true, "defaultValue": 0 },
    "StanceBreakAddedRatio": { "isPercent": true, "defaultValue": 0, "comment": "unknown, not used, likely percent" },
    "SPRatioBase": { "isPercent": true, "defaultValue": 1 },
    "StatusProbabilityBase": { "isPercent": true, "defaultValue": 0 },
    "StatusResistanceBase": { "isPercent": true, "defaultValue": 0 },
    "PhysicalAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "PhysicalResistance": { "isPercent": true, "defaultValue": 0 },
    "FireAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "FireResistance": { "isPercent": true, "defaultValue": 0 },
    "IceAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "IceResistance": { "isPercent": true, "defaultValue": 0 },
    "ThunderAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "ThunderResistance": { "isPercent": true, "defaultValue": 0 },
    "WindAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "WindResistance": { "isPercent": true, "defaultValue": 0 },
    "QuantumAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "QuantumResistance": { "isPercent": true, "defaultValue": 0 },
    "ImaginaryAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "ImaginaryResistance": { "isPercent": true, "defaultValue": 0 },
    "BaseHP": { "isPercent": false, "defaultValue": 0 },
    "HPDelta": { "isPercent": false, "defaultValue": 0 },
    "HPAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "BaseAttack": { "isPercent": false, "defaultValue": 0 },
    "AttackDelta": { "isPercent": false, "defaultValue": 0 },
    "AttackAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "BaseDefence": { "isPercent": false, "defaultValue": 0 },
    "DefenceDelta": { "isPercent": false, "defaultValue": 0 },
    "DefenceAddedRatio": { "isPercent": true, "defaultValue": 0 },
    "BaseSpeed": { "isPercent": false, "defaultValue": 0 },
    "HealTakenRatio": { "isPercent": true, "defaultValue": 0, "comment": "unknown, not used, likely percent" },
    "PhysicalResistanceDelta": { "isPercent": false, "defaultValue": 0, "comment": "unknown, not used, likely flat" },
    "FireResistanceDelta": { "isPercent": false, "defaultValue": 0, "comment": "unknown, not used, likely flat" },
    "IceResistanceDelta": { "isPercent": false, "defaultValue": 0, "comment": "unknown, not used, likely flat" },
    "ThunderResistanceDelta": { "isPercent": false, "defaultValue": 0, "comment": "unknown, not used, likely flat" },
    "WindResistanceDelta": { "isPercent": false, "defaultValue": 0, "comment": "unknown, not used, likely flat" },
    "QuantumResistanceDelta": { "isPercent": false, "defaultValue": 0, "comment": "unknown, not used, likely flat" },
    "ImaginaryResistanceDelta": { "isPercent": false, "defaultValue": 0, "comment": "unknown, not used, likely flat" },
    "SpeedDelta": { "isPercent": false, "defaultValue": 0 },
};
exports.otherStatPropertyTypes = {
    "SpeedAddedRatio": { "isPercent": true, "defaultValue": 0 },
};
function isStatPropertyType(type) {
    return type != "SpeedAddedRatio";
}
