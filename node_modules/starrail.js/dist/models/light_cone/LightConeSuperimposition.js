"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightConeSuperimposition = void 0;
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = require("../../errors/AssetsNotFoundError");
const TextAssets_1 = require("../assets/TextAssets");
const StatProperty_1 = require("../StatProperty");
const DynamicTextAssets_1 = require("../assets/DynamicTextAssets");
class LightConeSuperimposition {
    constructor(id, level, client) {
        this.id = id;
        this.level = level;
        this.client = client;
        const _data = client.cachedAssetsManager.getExcelData("EquipmentSkillConfig", this.id, this.level);
        if (!_data)
            throw new AssetsNotFoundError_1.AssetsNotFoundError("LightConeSuperimposition", this.id);
        this._data = _data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.paramList = json.get("ParamList").mapArray((_, v) => v.getAsNumber("Value"));
        this.name = new TextAssets_1.TextAssets(json.getAsNumber("SkillName", "Hash"), this.client);
        this.description = new DynamicTextAssets_1.DynamicTextAssets(json.getAsNumber("SkillDesc", "Hash"), { paramList: this.paramList }, this.client);
        this.stats = json.get("AbilityProperty").mapArray((_, prop) => {
            if (prop.getAsString("PropertyType") === "AllDamageTypeAddedRatio") {
                return StatProperty_1.StatProperty.ALL_DAMAGE_TYPES.map(damageType => new StatProperty_1.StatPropertyValue(damageType, prop.getAsNumber("Value", "Value"), this.client));
            }
            return [new StatProperty_1.StatPropertyValue(prop.getAsString("PropertyType"), prop.getAsNumber("Value", "Value"), this.client)];
        }).flat();
    }
}
exports.LightConeSuperimposition = LightConeSuperimposition;
