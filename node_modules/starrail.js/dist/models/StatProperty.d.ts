import { JsonObject } from "config_file.js";
import { StarRail } from "../client/StarRail";
import { ImageAssets } from "./assets/ImageAssets";
import { TextAssets } from "./assets/TextAssets";
import { DynamicTextAssets } from "./assets/DynamicTextAssets";
export declare class StatProperty {
    readonly type: StatPropertyType;
    readonly client: StarRail;
    readonly name: TextAssets;
    readonly nameSkillTree: TextAssets;
    readonly nameRelic: TextAssets;
    readonly nameFilter: TextAssets;
    readonly isDisplay: boolean;
    readonly isBattleDisplay: boolean;
    readonly order: number;
    /** Icon for the stat property. Also you can use svg files [here](https://cdn.discordapp.com/attachments/885221800882098197/1118292606384873625/hsr.zip). */
    readonly icon: ImageAssets;
    readonly isPercent: boolean;
    readonly _data: JsonObject;
    constructor(type: StatPropertyType, client: StarRail);
    static ALL_DAMAGE_TYPES: readonly ["PhysicalAddedRatio", "FireAddedRatio", "IceAddedRatio", "ThunderAddedRatio", "WindAddedRatio", "QuantumAddedRatio", "ImaginaryAddedRatio"];
}
export declare class StatPropertyValue {
    readonly client: StarRail;
    readonly type: StatPropertyType | OtherStatPropertyType;
    /** This will be null if type of provided `type` is {@apilink OtherStatPropertyType}. */
    readonly statProperty: StatProperty | null;
    readonly isPercent: boolean;
    readonly value: number;
    /** This will be null if [statProperty](#statProperty) is null. */
    readonly nameSkillTree: DynamicTextAssets | null;
    constructor(type: StatPropertyType | OtherStatPropertyType, value: number, client: StarRail);
    get valueText(): string;
}
export declare const statPropertyTypes: {
    readonly MaxHP: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly Attack: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly Defence: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly Speed: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly CriticalChance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, but used, likely percent";
    };
    readonly CriticalDamage: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, but used, likely percent";
    };
    readonly BreakDamageAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely percent";
    };
    readonly BreakDamageAddedRatioBase: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly HealRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely percent";
    };
    readonly MaxSP: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly SPRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely percent";
    };
    readonly StatusProbability: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, only used in inventory sort, likely percent";
    };
    readonly StatusResistance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, only used in inventory sort, likely percent";
    };
    readonly CriticalChanceBase: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly CriticalDamageBase: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly HealRatioBase: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly StanceBreakAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely percent";
    };
    readonly SPRatioBase: {
        readonly isPercent: true;
        readonly defaultValue: 1;
    };
    readonly StatusProbabilityBase: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly StatusResistanceBase: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly PhysicalAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly PhysicalResistance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly FireAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly FireResistance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly IceAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly IceResistance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly ThunderAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly ThunderResistance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly WindAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly WindResistance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly QuantumAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly QuantumResistance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly ImaginaryAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly ImaginaryResistance: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly BaseHP: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly HPDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly HPAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly BaseAttack: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly AttackDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly AttackAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly BaseDefence: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly DefenceDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly DefenceAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
    readonly BaseSpeed: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
    readonly HealTakenRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely percent";
    };
    readonly PhysicalResistanceDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely flat";
    };
    readonly FireResistanceDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely flat";
    };
    readonly IceResistanceDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely flat";
    };
    readonly ThunderResistanceDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely flat";
    };
    readonly WindResistanceDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely flat";
    };
    readonly QuantumResistanceDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely flat";
    };
    readonly ImaginaryResistanceDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
        readonly comment: "unknown, not used, likely flat";
    };
    readonly SpeedDelta: {
        readonly isPercent: false;
        readonly defaultValue: 0;
    };
};
/**
 * StatPropertyType|isPercent|defaultValue|Comment
 * ---|---|---|---
 * MaxHP|false|0|
 * Attack|false|0|
 * Defence|false|0|
 * Speed|false|0|
 * CriticalChance|true|0|unknown, but used, likely percent
 * CriticalDamage|true|0|unknown, but used, likely percent
 * BreakDamageAddedRatio|true|0|unknown, not used, likely percent
 * BreakDamageAddedRatioBase|true|0|
 * HealRatio|true|0|unknown, not used, likely percent
 * MaxSP|false|0|
 * SPRatio|true|0|unknown, not used, likely percent
 * StatusProbability|true|0|unknown, only used in inventory sort, likely percent
 * StatusResistance|true|0|unknown, only used in inventory sort, likely percent
 * CriticalChanceBase|true|0|
 * CriticalDamageBase|true|0|
 * HealRatioBase|true|0|
 * StanceBreakAddedRatio|true|0|unknown, not used, likely percent
 * SPRatioBase|true|1|
 * StatusProbabilityBase|true|0|
 * StatusResistanceBase|true|0|
 * PhysicalAddedRatio|true|0|
 * PhysicalResistance|true|0|
 * FireAddedRatio|true|0|
 * FireResistance|true|0|
 * IceAddedRatio|true|0|
 * IceResistance|true|0|
 * ThunderAddedRatio|true|0|
 * ThunderResistance|true|0|
 * WindAddedRatio|true|0|
 * WindResistance|true|0|
 * QuantumAddedRatio|true|0|
 * QuantumResistance|true|0|
 * ImaginaryAddedRatio|true|0|
 * ImaginaryResistance|true|0|
 * BaseHP|false|0|
 * HPDelta|false|0|
 * HPAddedRatio|true|0|
 * BaseAttack|false|0|
 * AttackDelta|false|0|
 * AttackAddedRatio|true|0|
 * BaseDefence|false|0|
 * DefenceDelta|false|0|
 * DefenceAddedRatio|true|0|
 * BaseSpeed|false|0|
 * HealTakenRatio|true|0|unknown, not used, likely percent
 * PhysicalResistanceDelta|false|0|unknown, not used, likely flat
 * FireResistanceDelta|false|0|unknown, not used, likely flat
 * IceResistanceDelta|false|0|unknown, not used, likely flat
 * ThunderResistanceDelta|false|0|unknown, not used, likely flat
 * WindResistanceDelta|false|0|unknown, not used, likely flat
 * QuantumResistanceDelta|false|0|unknown, not used, likely flat
 * ImaginaryResistanceDelta|false|0|unknown, not used, likely flat
 * SpeedDelta|false|0|
 */
export type StatPropertyType = keyof typeof statPropertyTypes;
export declare const otherStatPropertyTypes: {
    readonly SpeedAddedRatio: {
        readonly isPercent: true;
        readonly defaultValue: 0;
    };
};
/**
 * StatPropertyTypes which do not exist in AvatarPropertyConfig.json
 *
 * OtherStatPropertyType|isPercent|defaultValue|Comment
 * ---|---|---|---
 * SpeedAddedRatio|true|0|
 */
export type OtherStatPropertyType = keyof typeof otherStatPropertyTypes;
export declare function isStatPropertyType(type: StatPropertyType | OtherStatPropertyType): type is StatPropertyType;
