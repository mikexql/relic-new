"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OverallStatList = exports.StatList = exports.CharacterStats = void 0;
exports.sumStats = sumStats;
const config_file_js_1 = require("config_file.js");
const StatProperty_1 = require("../StatProperty");
const RelicSet_1 = require("../relic/RelicSet");
class CharacterStats {
    constructor(character) {
        var _a, _b, _c, _d;
        const client = character.client;
        const relicsStatProperties = character.relics.flatMap(r => [new StatProperty_1.StatPropertyValue(r.mainStat.mainStatData.statProperty.type, r.mainStat.value, client), ...r.subStats.map(s => new StatProperty_1.StatPropertyValue(s.subStatData.statProperty.type, s.value, client))]);
        const relicSetsStatProperties = RelicSet_1.RelicSet.getActiveSetBonus(character.relics).flatMap(set => set.activeBonus).flatMap(bonus => bonus.stats);
        const lightConeStatProperties = [...((_b = (_a = character.lightCone) === null || _a === void 0 ? void 0 : _a.basicStats) !== null && _b !== void 0 ? _b : []), ...((_d = (_c = character.lightCone) === null || _c === void 0 ? void 0 : _c.extraStats) !== null && _d !== void 0 ? _d : [])];
        const characterStatProperties = character.basicStats;
        const skillTreeNodesStatProperties = character.skillTreeNodes.flatMap(node => node.stats);
        const relicsStats = sumStats(relicsStatProperties, client);
        this.relicsStats = new StatList(relicsStats, character.characterData.combatType.id, client);
        const relicSetsStats = sumStats(relicSetsStatProperties, client);
        this.relicSetsStats = new StatList(relicSetsStats, character.characterData.combatType.id, client);
        const lightConeStats = sumStats(lightConeStatProperties, client);
        this.lightConeStats = new StatList(lightConeStats, character.characterData.combatType.id, client);
        const characterStats = Object.fromEntries(characterStatProperties.map(stat => [stat.type, stat]));
        this.characterStats = new StatList(characterStats, character.characterData.combatType.id, client);
        const skillTreeNodesStats = sumStats(skillTreeNodesStatProperties, client);
        this.skillTreeNodesStats = new StatList(skillTreeNodesStats, character.characterData.combatType.id, client);
        const overallStats = sumStats([relicsStatProperties, relicSetsStatProperties, lightConeStatProperties, characterStatProperties, skillTreeNodesStatProperties].flat(), client);
        this.overallStats = new OverallStatList(overallStats, character.characterData.combatType.id, client);
    }
}
exports.CharacterStats = CharacterStats;
class StatList {
    constructor(list, combatTypeId, client) {
        this.list = list;
        this.combatTypeId = combatTypeId;
        this.client = client;
    }
    // Advanced Stats
    get critRate() {
        return this.getByType("CriticalChanceBase");
    }
    get critDamage() {
        return this.getByType("CriticalDamageBase");
    }
    get breakEffect() {
        return this.getByType("BreakDamageAddedRatioBase");
    }
    get outgoingHealingBoost() {
        return this.getByType("HealRatioBase");
    }
    get maxEnergy() {
        return this.getByType("MaxSP");
    }
    get energyRegenRate() {
        return this.getByType("SPRatioBase");
    }
    get effectHitRate() {
        return this.getByType("StatusProbabilityBase");
    }
    get effectResistance() {
        return this.getByType("StatusResistanceBase");
    }
    // DMG Type
    get physicalDamageBonus() {
        return this.getByType("PhysicalAddedRatio");
    }
    get fireDamageBonus() {
        return this.getByType("FireAddedRatio");
    }
    get iceDamageBonus() {
        return this.getByType("IceAddedRatio");
    }
    get lightningDamageBonus() {
        return this.getByType("ThunderAddedRatio");
    }
    get windDamageBonus() {
        return this.getByType("WindAddedRatio");
    }
    get quantumDamageBonus() {
        return this.getByType("QuantumAddedRatio");
    }
    get imaginaryDamageBonus() {
        return this.getByType("ImaginaryAddedRatio");
    }
    get physicalResistanceBoost() {
        return this.getByType("PhysicalResistance");
    }
    get fireResistanceBoost() {
        return this.getByType("FireResistance");
    }
    get iceResistanceBoost() {
        return this.getByType("IceResistance");
    }
    get lightningResistanceBoost() {
        return this.getByType("ThunderResistance");
    }
    get windResistanceBoost() {
        return this.getByType("WindResistance");
    }
    get quantumResistanceBoost() {
        return this.getByType("QuantumResistance");
    }
    get imaginaryResistanceBoost() {
        return this.getByType("ImaginaryResistance");
    }
    getByType(type) {
        var _a;
        const defaultValue = (0, StatProperty_1.isStatPropertyType)(type) ? StatProperty_1.statPropertyTypes[type].defaultValue : StatProperty_1.otherStatPropertyTypes[type].defaultValue;
        return (_a = this.list[type]) !== null && _a !== void 0 ? _a : new StatProperty_1.StatPropertyValue(type, defaultValue, this.client);
    }
    getAll() {
        return Object.values(this.list);
    }
    getMatchedDamageBonus() {
        switch (this.combatTypeId) {
            case "Physical":
                return this.physicalDamageBonus;
            case "Fire":
                return this.fireDamageBonus;
            case "Ice":
                return this.iceDamageBonus;
            case "Thunder":
                return this.lightningDamageBonus;
            case "Wind":
                return this.windDamageBonus;
            case "Quantum":
                return this.quantumDamageBonus;
            case "Imaginary":
                return this.imaginaryDamageBonus;
        }
    }
}
exports.StatList = StatList;
class OverallStatList extends StatList {
    constructor(list, combatTypeId, client) {
        super(list, combatTypeId, client);
    }
    // Base Stats
    get maxHP() {
        return new StatProperty_1.StatPropertyValue("MaxHP", this.getByType("BaseHP").value * (1 + this.getByType("HPAddedRatio").value) + this.getByType("HPDelta").value, this.client);
    }
    get defense() {
        return new StatProperty_1.StatPropertyValue("Defence", this.getByType("BaseDefence").value * (1 + this.getByType("DefenceAddedRatio").value) + this.getByType("DefenceDelta").value, this.client);
    }
    get attack() {
        return new StatProperty_1.StatPropertyValue("Attack", this.getByType("BaseAttack").value * (1 + this.getByType("AttackAddedRatio").value) + this.getByType("AttackDelta").value, this.client);
    }
    get speed() {
        return new StatProperty_1.StatPropertyValue("Speed", this.getByType("BaseSpeed").value * (1 + this.getByType("SpeedAddedRatio").value) + this.getByType("SpeedDelta").value, this.client);
    }
}
exports.OverallStatList = OverallStatList;
function sumStats(stats, client) {
    return Object.fromEntries(Object.entries((0, config_file_js_1.separateByValue)(stats, stat => stat.type))
        .map(([type, list]) => [type, list.reduce((a, b) => new StatProperty_1.StatPropertyValue(a.type, a.value + b.value, client))]));
}
