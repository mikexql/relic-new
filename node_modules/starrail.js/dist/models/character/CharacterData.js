"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CharacterData = void 0;
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = require("../../errors/AssetsNotFoundError");
const TextAssets_1 = require("../assets/TextAssets");
const CombatType_1 = require("../CombatType");
const Path_1 = require("../Path");
const Skill_1 = require("./skill/Skill");
const ImageAssets_1 = require("../assets/ImageAssets");
const SkillTreeNode_1 = require("./skill/SkillTreeNode");
const Eidolon_1 = require("./Eidolon");
const StatProperty_1 = require("../StatProperty");
const ts_utils_1 = require("../../utils/ts_utils");
class CharacterData {
    constructor(id, client) {
        this.id = id;
        this.client = client;
        const _data = client.cachedAssetsManager._getExcelData("AvatarConfig")[this.id];
        if (!_data)
            throw new AssetsNotFoundError_1.AssetsNotFoundError("Character", this.id);
        this._data = _data;
        const _itemData = client.cachedAssetsManager.getExcelData("ItemConfigAvatar", this.id);
        if (!_itemData)
            throw new AssetsNotFoundError_1.AssetsNotFoundError("Character Item", this.id);
        this._itemData = _itemData;
        const json = new config_file_js_1.JsonReader(this._data);
        const itemJson = new config_file_js_1.JsonReader(this._itemData);
        this.name = new TextAssets_1.TextAssets(json.getAsNumber("AvatarName", "Hash"), this.client);
        this.description = new TextAssets_1.TextAssets(itemJson.getAsNumber("ItemBGDesc", "Hash"), this.client);
        this.stars = Number(json.getAsString("Rarity").slice(-1));
        this.maxEnergy = json.getAsNumber("SPNeed", "Value");
        this.combatType = new CombatType_1.CombatType(json.getAsString("DamageType"), this.client);
        this.path = new Path_1.Path(json.getAsString("AvatarBaseType"), this.client);
        this.skills = json.get("SkillList").mapArray((_, skillId) => new Skill_1.Skill(skillId.getAsNumber(), this.client));
        const skillTreeData = this.client.cachedAssetsManager._getExcelData("AvatarSkillTreeConfig");
        const skillTreeJson = new config_file_js_1.JsonReader(skillTreeData);
        this.skillTreeNodes = skillTreeJson.filterObject((_, node) => node.getAsNumber("1", "AvatarID") === this.id).map(([nodeId]) => new SkillTreeNode_1.SkillTreeNode(Number(nodeId), this.client));
        const eidolonsData = this.client.cachedAssetsManager._getExcelData("AvatarRankConfig");
        const eidolonsJson = new config_file_js_1.JsonReader(eidolonsData);
        this.eidolons = eidolonsJson.filterObject((eidolonId) => Math.floor(Number(eidolonId) / 100) === this.id).map(([eidolonId]) => new Eidolon_1.Eidolon(Number(eidolonId), this.client));
        this.icon = new ImageAssets_1.ImageAssets(json.getAsString("DefaultAvatarHeadIconPath"), this.client);
        this.sideIcon = new ImageAssets_1.ImageAssets(json.getAsString("AvatarSideIconPath"), this.client);
        this.miniIcon = new ImageAssets_1.ImageAssets(json.getAsString("AvatarMiniIconPath"), this.client);
        this.teamActionIcon = new ImageAssets_1.ImageAssets(json.getAsString("ActionAvatarHeadIconPath"), this.client);
        this.teamWaitingIcon = new ImageAssets_1.ImageAssets(json.getAsString("WaitingAvatarHeadIconPath"), this.client);
        this.splashImage = new ImageAssets_1.ImageAssets(json.getAsString("AvatarCutinFrontImgPath"), this.client);
        this.splashCutInFigureImage = new ImageAssets_1.ImageAssets(json.getAsString("AvatarCutinImgPath"), this.client);
        this.splashCutInBackgroundImage = new ImageAssets_1.ImageAssets(json.getAsString("AvatarCutinBgImgPath"), this.client);
        this.shopItemIcon = new ImageAssets_1.ImageAssets(itemJson.getAsString("ItemAvatarIconPath"), this.client);
    }
    getStatsByLevel(ascension, level) {
        const ascensionData = this.client.cachedAssetsManager._getExcelData("AvatarPromotionConfig")[this.id][ascension];
        const ascensionJson = new config_file_js_1.JsonReader(ascensionData);
        return [
            new StatProperty_1.StatPropertyValue("BaseAttack", ascensionJson.getAsNumber("AttackBase", "Value") + ascensionJson.getAsNumber("AttackAdd", "Value") * (level - 1), this.client),
            new StatProperty_1.StatPropertyValue("BaseDefence", ascensionJson.getAsNumber("DefenceBase", "Value") + ascensionJson.getAsNumber("DefenceAdd", "Value") * (level - 1), this.client),
            new StatProperty_1.StatPropertyValue("BaseHP", ascensionJson.getAsNumber("HPBase", "Value") + ascensionJson.getAsNumber("HPAdd", "Value") * (level - 1), this.client),
            new StatProperty_1.StatPropertyValue("BaseSpeed", ascensionJson.getAsNumber("SpeedBase", "Value"), this.client),
            new StatProperty_1.StatPropertyValue("CriticalChanceBase", ascensionJson.getAsNumber("CriticalChance", "Value"), this.client),
            new StatProperty_1.StatPropertyValue("CriticalDamageBase", ascensionJson.getAsNumber("CriticalDamage", "Value"), this.client),
        ];
    }
    getSkillTreeIdMap() {
        const skillTreeMap = this.getSkillTreeMap();
        const skillTreeIdMap = {};
        function convertKeyIntoId(map, obj) {
            map.forEach((_, key) => {
                obj[key.id] = {};
                if (map.get(key) instanceof Map) {
                    convertKeyIntoId(map.get(key), obj[key.id]);
                }
            });
        }
        convertKeyIntoId(skillTreeMap, skillTreeIdMap);
        return skillTreeIdMap;
    }
    getSkillTreeMap() {
        const skillTreeMap = new Map();
        const skillTreeNodes = this.skillTreeNodes;
        const routes = [];
        for (const node of skillTreeNodes) {
            const route = getSkillTreeRoute(skillTreeNodes, node);
            route.push(node);
            routes.push(route);
        }
        for (const route of routes) {
            let map = skillTreeMap;
            for (let i = 0; i < route.length; i++) {
                const key = route[i];
                if (!map.has(key)) {
                    map.set(key, new Map());
                }
                map = map.get(key);
            }
        }
        return skillTreeMap;
    }
    /**
     * @returns array of group of SkillTreeNode, which is grouped by the structure of skill tree
     */
    getGroupedSkillTreeNodes() {
        const skillTreeMap = this.getSkillTreeMap();
        const groupedSkillTreeNodes = [];
        const otherNodes = [];
        skillTreeMap.forEach((value, key) => {
            if (value.size === 0) {
                if (!key.isUnlockedByDefault)
                    otherNodes.push(key);
                return;
            }
            const group = (0, ts_utils_1.getKeysFromSimpleMap)(value);
            group.unshift(key);
            groupedSkillTreeNodes.push(group);
        });
        return [otherNodes, ...groupedSkillTreeNodes];
    }
    getBaseAggro(ascension) {
        const ascensionData = this.client.cachedAssetsManager._getExcelData("AvatarPromotionConfig")[this.id][ascension];
        const ascensionJson = new config_file_js_1.JsonReader(ascensionData);
        return ascensionJson.getAsNumber("BaseAggro", "Value");
    }
}
exports.CharacterData = CharacterData;
function getSkillTreeRoute(nodes, target, route = []) {
    const preNodeId = target.previousNodeId;
    if (preNodeId === null)
        return route;
    const preNode = nodes.find(node => node.id === preNodeId);
    return getSkillTreeRoute(nodes, preNode, [preNode, ...route]);
}
