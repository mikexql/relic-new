"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CharacterBuilder = exports.Character = void 0;
const config_file_js_1 = require("config_file.js");
const CharacterData_1 = require("./CharacterData");
const LightCone_1 = require("../light_cone/LightCone");
const Relic_1 = require("../relic/Relic");
const SkillTreeNode_1 = require("./skill/SkillTreeNode");
const StatProperty_1 = require("../StatProperty");
const CharacterStats_1 = require("./CharacterStats");
const SkillLevel_1 = require("./skill/SkillLevel");
const ts_utils_1 = require("../../utils/ts_utils");
const Costume_1 = require("./Costume");
class Character {
    constructor(data, client) {
        this.client = client;
        this._data = data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.characterData = new CharacterData_1.CharacterData(json.getAsNumber("avatarId"), this.client);
        this.lightCone = json.has("equipment", "tid") ? new LightCone_1.LightCone(json.getAsJsonObject("equipment"), this.client) : null;
        this.relics = json.getAsJsonArrayWithDefault([], "relicList").map(relic => new Relic_1.Relic(relic, this.client));
        this.level = json.getAsNumber("level");
        this.exp = json.getAsNumberWithDefault(0, "exp");
        this.ascension = json.getAsNumberWithDefault(0, "promotion");
        this.eidolons = json.getAsNumberWithDefault(0, "rank");
        this.costume = json.has("dressedSkinId") ? new Costume_1.Costume(json.getAsNumber("dressedSkinId"), this.client) : null;
        const unlockedEidolons = this.characterData.eidolons.slice(0, this.eidolons);
        this.skillTreeNodes = json.get("skillTreeList").mapArray((_, skill) => {
            const node = new SkillTreeNode_1.SkillTreeNode(skill.getAsNumber("pointId"), this.client);
            const levelUpByEidolons = node.levelUpSkills.length > 0 ? unlockedEidolons.reduce((levels, eidolon) => { var _a, _b; return levels + ((_b = (_a = eidolon.skillsLevelUp[node.levelUpSkills[0].id]) === null || _a === void 0 ? void 0 : _a.levelUp) !== null && _b !== void 0 ? _b : 0); }, 0) : 0;
            const level = new SkillLevel_1.SkillLevel(skill.getAsNumber("level"), levelUpByEidolons);
            if (level.base < 1)
                return null;
            return node.getSkillTreeNodeByLevel(level);
        }).filter(ts_utils_1.nonNullable);
        this.skills = this.characterData.skills.map(skill => {
            var _a;
            const skillNode = this.skillTreeNodes.find(node => node.levelUpSkills.some(s => s.id === skill.id));
            // set default level to (1, 0) for "MazeNormal" skills.
            const level = (_a = skillNode === null || skillNode === void 0 ? void 0 : skillNode.level) !== null && _a !== void 0 ? _a : new SkillLevel_1.SkillLevel(1, 0);
            return skill.getSkillByLevel(level);
        }).filter(ts_utils_1.nonNullable);
        this.basicStats = [
            ...this.characterData.getStatsByLevel(this.ascension, this.level),
            new StatProperty_1.StatPropertyValue("SPRatioBase", 1, this.client),
            new StatProperty_1.StatPropertyValue("MaxSP", this.characterData.maxEnergy, this.client),
        ];
        this.stats = new CharacterStats_1.CharacterStats(this);
    }
    static builder() {
        return new CharacterBuilder();
    }
}
exports.Character = Character;
class CharacterBuilder {
    constructor() {
        this.data = {
            level: 1,
            avatarId: null,
            equipment: {},
            relicList: [],
            skillTreeList: null,
        };
    }
    lightCone(lightCone) {
        this.data["equipment"] = lightCone._data;
        return this;
    }
    addRelic(relic) {
        this.data["relicList"].push(relic._data);
        return this;
    }
    level(level) {
        this.data["level"] = level;
        return this;
    }
    ascension(ascension) {
        this.data["promotion"] = ascension;
        return this;
    }
    eidolons(eidolons) {
        this.data["rank"] = eidolons;
        return this;
    }
    character(characterData, unlockAllTraces) {
        this.data["avatarId"] = characterData.id;
        this.data["skillTreeList"] = characterData.skillTreeNodes.map(node => ({
            pointId: node.id,
            level: unlockAllTraces ? node.maxLevel : 0,
        }));
        return this;
    }
    setTraceLevel(nodeId, level) {
        if (this.data["skillTreeList"] === null) {
            throw new Error("Character data is not provided. Please call `character` method first.");
        }
        const node = this.data["skillTreeList"].find(n => n["pointId"] === nodeId);
        if (node === undefined) {
            throw new Error(`Node with ID ${nodeId} is not found.`);
        }
        node["level"] = level;
        return this;
    }
    build(client) {
        if (this.data["avatarId"] === null) {
            throw new Error("Character ID is not set.");
        }
        return new Character(this.data, client);
    }
}
exports.CharacterBuilder = CharacterBuilder;
