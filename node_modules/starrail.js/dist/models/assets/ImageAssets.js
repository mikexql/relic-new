"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageAssets = void 0;
class ImageAssets {
    constructor(path, client, maxPriority = Number.POSITIVE_INFINITY) {
        var _a;
        this.client = client;
        this.path = path;
        this.imageBaseUrl = (_a = client.options.imageBaseUrls.filter(url => url.priority <= maxPriority).sort((a, b) => b.priority - a.priority).find(url => url.regexList.some(regex => regex.test(this.path)))) !== null && _a !== void 0 ? _a : null;
        this.url = (() => {
            if (this.path === "" || this.imageBaseUrl == null)
                return "";
            const convertedPath = convertPathForImageBaseUrl(this.imageBaseUrl, this.path);
            if ("customParser" in this.imageBaseUrl)
                return `${this.imageBaseUrl.url}/${this.imageBaseUrl.customParser(convertedPath)}`;
            return `${this.imageBaseUrl.url}/${convertedPath}`;
        })();
        this.isAvailable = this.url !== null && this.url !== undefined && this.url !== "";
    }
    /**
     * @returns a new instance of ImageAssets with the another imageBaseUrl
     */
    nextSource() {
        if (this.imageBaseUrl == null)
            return null;
        return new ImageAssets(this.path, this.client, this.imageBaseUrl.priority - 1);
    }
}
exports.ImageAssets = ImageAssets;
function convertPathForImageBaseUrl(imageBaseUrl, path) {
    const split = path.split("/");
    switch (imageBaseUrl.filePath) {
        case "UPPER_CAMEL_CASE":
            return path;
        case "LOWER_CASE":
            return split.slice(0, -1).join("/").toLowerCase() + "/" + split.slice(-1)[0];
        case "NONE":
            return split.slice(-1)[0];
    }
}
