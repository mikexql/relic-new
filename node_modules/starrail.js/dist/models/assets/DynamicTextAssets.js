"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicTextAssets = void 0;
const config_file_js_1 = require("config_file.js");
const TextAssets_1 = require("./TextAssets");
const defaultDynamicData = {
    paramList: [],
};
/**
 * TextAssets which has placeholders in the text.
 */
class DynamicTextAssets extends TextAssets_1.TextAssets {
    // readonly _dynamicTest: string | null;
    constructor(id, data, client) {
        super(id, client);
        this.dynamicData = (0, config_file_js_1.bindOptions)(defaultDynamicData, data);
        // this._dynamicTest = this.getNullableReplacedText();
    }
    /**
     * @throws AssetsNotFoundError
     */
    getReplacedData(replaceWith = [], lang) {
        function isEnabled(key) {
            return replaceWith.length === 0 || replaceWith.includes(key);
        }
        const usedParamIndices = [];
        let text = this.get(lang);
        if (isEnabled("paramList")) {
            text = text.replace(/<unbreak>#(\d+)\[(.+?)\](%?)<\/unbreak>/g, (_, paramIndexText, valueType, percent) => {
                const paramIndex = parseInt(paramIndexText) - 1;
                const isPercent = percent === "%";
                const value = this.dynamicData.paramList[paramIndex] * (isPercent ? 100 : 1);
                usedParamIndices.push(paramIndex);
                const fix = valueType === "i" ? 0
                    : /^f\d+$/.test(valueType) ? Number(valueType.replace("f", ""))
                        : null;
                if (fix === null) {
                    // TODO: remove this
                    console.error(`Unknown valueType ${valueType} in DynamicTextAssets.`);
                    throw new Error(`Unknown valueType ${valueType} in DynamicTextAssets.`);
                }
                const fixedValue = value.toFixed(fix);
                return fixedValue + percent;
            });
        }
        return { text, usedParamIndices };
    }
    /**
     * @returns null instead of throwing AssetsNotFoundError.
     */
    getNullableReplacedData(replaceWith = [], lang) {
        try {
            return this.getReplacedData(replaceWith, lang);
        }
        catch (_a) {
            return null;
        }
    }
    /**
     * @throws AssetsNotFoundError
     */
    getReplacedText(replaceWith = [], lang) {
        return this.getReplacedData(replaceWith, lang).text;
    }
    /**
     * @returns null instead of throwing AssetsNotFoundError.
     */
    getNullableReplacedText(replaceWith = [], lang) {
        try {
            return this.getReplacedText(replaceWith, lang);
        }
        catch (_a) {
            return null;
        }
    }
}
exports.DynamicTextAssets = DynamicTextAssets;
