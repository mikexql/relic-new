"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextAssets = void 0;
const AssetsNotFoundError_1 = require("../../errors/AssetsNotFoundError");
class TextAssets {
    // readonly _test: string | null;
    constructor(id, client) {
        this.id = id;
        this.client = client;
        // this._test = this.getNullable();
    }
    /**
     * @throws {AssetsNotFoundError}
     */
    get(lang) {
        lang !== null && lang !== void 0 ? lang : (lang = this.client.options.defaultLanguage);
        const text = this.client.cachedAssetsManager.getLanguageData(lang)[this.id];
        if (!text)
            throw new AssetsNotFoundError_1.AssetsNotFoundError("Text Assets", this.id);
        return text;
    }
    /**
     * @returns null instead of throwing AssetsNotFoundError.
     */
    getNullable(lang) {
        try {
            return this.get(lang);
        }
        catch (_a) {
            return null;
        }
    }
    /**
     * @returns whether the text is formatted or not.
     */
    isFormatted(lang) {
        const text = this.getNullable(lang);
        return isTextFormatted(text);
    }
    getAsFormattedText(lang) {
        const text = this.get(lang);
        return new FormattedText(text);
    }
    /**
     * @returns null instead of throwing AssetsNotFoundError.
     */
    getAsNullableFormattedText(lang) {
        try {
            return this.getAsFormattedText(lang);
        }
        catch (_a) {
            return null;
        }
    }
    toString() {
        var _a;
        return (_a = this.getNullable()) !== null && _a !== void 0 ? _a : `Unknown TextAssets(${this.id})`;
    }
}
exports.TextAssets = TextAssets;
function isTextFormatted(text) {
    if (text === null)
        return false;
    return /<.+>/.test(text);
}
class FormattedText {
    constructor(text) {
        this.text = text;
    }
    /**
     * Make colors and other formatting work in HTML.
     */
    replaceHTML() {
        const replaced = this.text
            .replace(/<color=([^>]+)>/g, "<span style=\"color:$1\">")
            .replace(/<\/color>/g, "</span>")
            .replace(/\r\n|\n|\\n|\r/gm, "<br>");
        return new FormattedText(replaced);
    }
}
