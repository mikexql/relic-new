"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelicSubStat = exports.RelicMainStat = exports.RelicBuilder = exports.Relic = void 0;
const config_file_js_1 = require("config_file.js");
const RelicData_1 = require("./RelicData");
const StatProperty_1 = require("../StatProperty");
class Relic {
    constructor(data, client) {
        this.client = client;
        this._data = data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.relicData = new RelicData_1.RelicData(json.getAsNumber("tid"), this.client);
        this.level = json.getAsNumberWithDefault(0, "level");
        const mainAffixId = json.getAsNumber("mainAffixId");
        const mainStatData = this.relicData.mainStatGroup.mainStats.find(mainStat => mainStat.id === mainAffixId);
        this.mainStat = new RelicMainStat(mainStatData, this.level);
        this.subStats = json.has("subAffixList") ? json.get("subAffixList").mapArray((_, subAffix) => {
            const subAffixId = subAffix.getAsNumber("affixId");
            const subStatData = this.relicData.subStatGroup.subStats.find(s => s.id === subAffixId);
            const count = subAffix.getAsNumber("cnt");
            const steps = subAffix.getAsNumberWithDefault(0, "step");
            return new RelicSubStat(subStatData, count, steps);
        }) : [];
    }
    static builder() {
        return new RelicBuilder();
    }
}
exports.Relic = Relic;
class RelicBuilder {
    constructor() {
        this.data = {
            subAffixList: [],
        };
        this.relicData = null;
    }
    level(level) {
        this.data.level = level;
        return this;
    }
    relic(relicData) {
        this.data.tid = relicData.id;
        this.relicData = relicData;
        return this;
    }
    mainStat(type) {
        if (!this.relicData)
            throw new Error("RelicData is not set. Please call `relic` method first.");
        const mainStatData = this.relicData.mainStatGroup.mainStats.find(stat => stat.statProperty.type === type);
        if (!mainStatData)
            throw new Error(`MainStat with type ${type} is not found.`);
        this.data.mainAffixId = mainStatData.id;
        return this;
    }
    addSubStat(type, count, steps) {
        if (!this.relicData)
            throw new Error("RelicData is not set. Please call `relic` method first.");
        const subStatData = this.relicData.subStatGroup.subStats.find(stat => stat.statProperty.type === type);
        if (!subStatData)
            throw new Error(`SubStat with type ${type} is not found.`);
        this.data.subAffixList.push({
            affixId: subStatData.id,
            cnt: count,
            step: steps,
        });
        return this;
    }
    build(client) {
        return new Relic(this.data, client);
    }
}
exports.RelicBuilder = RelicBuilder;
class RelicMainStat extends StatProperty_1.StatPropertyValue {
    constructor(mainStatData, level) {
        const value = mainStatData.baseValue + mainStatData.levelValue * level;
        super(mainStatData.statProperty.type, value, mainStatData.statProperty.client);
        this.mainStatData = mainStatData;
        this.level = level;
        this.value = value;
    }
}
exports.RelicMainStat = RelicMainStat;
class RelicSubStat extends StatProperty_1.StatPropertyValue {
    constructor(subStatData, count, steps) {
        const value = subStatData.baseValue * count + subStatData.stepValue * steps;
        super(subStatData.statProperty.type, value, subStatData.statProperty.client);
        this.subStatData = subStatData;
        this.count = count;
        this.steps = steps;
        this.value = value;
    }
}
exports.RelicSubStat = RelicSubStat;
